from data_interfaces.unpaired_interfaces.face_to_simpson_interface import FaceToSimpsonDataset
from torch.utils.data import DataLoader
import torch
from torchvision.utils import save_image
from scores.fid_scores import cal_fid as fid_score
from utils import bcolors
from models.CycleGAN import CycleGAN
import os
import shutil
import data_ios
import matplotlib.pyplot as plt
import numpy as np

if __name__ == "__main__":

    # Where to save images generated by the generator (G: X -> Y)
    generated_images_dir = "generated"

    # A file containing the paths of all the images generated
    generated_filenames_file_path = "gtlist.txt"

    # A file containing the paths of all test set's images
    test_filenames_filepath = "predlist.txt"

    os.makedirs(generated_images_dir, exist_ok=True)

    generated_filenames_file = open(generated_filenames_file_path, "w")

    # Set Torch Device
    device = "cpu"
    execution_device = torch.device(device)

    # Define and create Test Dataset
    test_data = FaceToSimpsonDataset("datasets/my_simpson_dataset/testB", "datasets/my_simpson_dataset/testA", apply_transforms=False)
    
    # Create Data Loader
    test_dataloader = DataLoader(test_data, batch_size=1, shuffle=True)

    # Create Model
    cycleGAN = CycleGAN(training_phase=False, device=execution_device, save_dir="checkpoints", generated_images_dir=generated_images_dir,
                        generated_filenames_file=generated_filenames_file, lambda_cycle_loss=10.0, init_gain=0.02)

    print(f"Device used: {execution_device}")

    print("Testing...")

    cycleGAN.load_checkpoints(best_model=True, restore_training=False)

    for i, input_data in enumerate(test_dataloader):
        x_images, y_images = input_data
        plt.imshow(np.transpose(x_images[0].numpy(), (1, 2, 0)))
        plt.show()
        cycleGAN.set_input_tensors(x_images, y_images)
        cycleGAN.test_step()

    
    generated_filenames_file.close()

    real_data_generator = data_ios.data_prepare_fid_is(test_filenames_filepath, 1, 299, False)
    fake_data_generator = data_ios.data_prepare_fid_is(generated_filenames_file_path, 1, 299, False)
    dims = 2048

    final_score = fid_score(real_data_generator, fake_data_generator, dims, False)
    
    print(f"{bcolors.CYAN}FID score: {bcolors.GREEN}{final_score}{bcolors.WHITE}")
    os.remove(generated_filenames_file_path)
    shutil.rmtree(generated_images_dir)

    